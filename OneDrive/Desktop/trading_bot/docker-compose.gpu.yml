# GPU-Accelerated Docker Compose
version: '3.8'

services:
  trading-bot-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    ports:
      - "8000:8000"
    environment:
      - DEPLOYMENT_TYPE=gpu_accelerated
      - CUDA_VISIBLE_DEVICES=all
      - TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0;8.6;9.0"
    depends_on:
      - redis
      - postgres
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - trading-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${GPU_COUNT:-1}
              capabilities: [gpu]
        limits:
          memory: ${MEMORY_LIMIT:-16G}

  # GPU monitoring service
  nvidia-dcgm-exporter:
    image: nvidia/dcgm-exporter:latest
    ports:
      - "9400:9400"
    environment:
      - DCGM_EXPORTER_LISTEN=:9400
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - trading-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trading-network
    command: redis-server --appendonly yes --maxmemory ${REDIS_MEMORY:-1gb}

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: ${DB_MEMORY:-4G}

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: timeseries
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - trading-network

  # Enhanced monitoring for GPU deployments
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-gpu.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-gpu-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - trading-network

volumes:
  postgres_data:
  redis_data:
  timescale_data:
  grafana_data:
  prometheus_data:

networks:
  trading-network:
    driver: bridge